@model QCapp.ViewModels.FieldConfigurationViewModel

@{
    ViewData["Title"] = (Model.DocumentId == null ? "Add Field" : "Update Field");
    Layout = null;
}

<span class="section">@ViewBag.Title</span>
<form asp-action="Create" novalidate>

    <div class="field item form-group">
        <label class="col-form-label col-md-3 col-sm-3  label-align">@Html.DisplayNameFor(model => model.FieldId)<span class="required">*</span></label>
        <div class="col-md-6 col-sm-6">
            <input class="form-control" name="@Html.DisplayNameFor(model => model.FieldId)" placeholder="" required="required" />
        </div>
    </div>
    <div class="field item form-group">
        <label class="col-form-label col-md-3 col-sm-3  label-align">@Html.DisplayNameFor(model => model.FieldSubId)</label>
        <div class="col-md-6 col-sm-6">
            <input class="form-control" name="@Html.DisplayNameFor(model => model.FieldSubId)" placeholder="" />
        </div>
    </div>
    <div class="field item form-group">
        <label class="col-form-label col-md-3 col-sm-3  label-align">@Html.DisplayNameFor(model => model.FieldName)</label>
        <div class="col-md-6 col-sm-6">
            <input class="form-control" name="@Html.DisplayNameFor(model => model.FieldName)" placeholder=""/>
        </div>
    </div>
    <div class="field item form-group">
        <label class="col-form-label col-md-3 col-sm-3  label-align">@Html.DisplayNameFor(model => model.FieldType)</label>
        <div class="col-md-6 col-sm-6">
            <input class="form-control" name="@Html.DisplayNameFor(model => model.FieldType)" placeholder="" />
        </div>
    </div>
    <div class="field item form-group">
        <label class="col-form-label col-md-3 col-sm-3  label-align">@Html.DisplayNameFor(model => model.DocumentName)</label>
        <div class="col-md-6 col-sm-6">
            <select name="@Html.DisplayNameFor(model => model.DocumentName)" class="form-control">
                <option value="">Choose..</option>
                <option value="press">Press</option>
                <option value="net">Internet</option>
                <option value="mouth">Word of mouth</option>
            </select>
        </div>
    </div>
    <div class="field item form-group">
        <label class="col-form-label col-md-3 col-sm-3  label-align">@Html.DisplayNameFor(model => model.Template)</label>
        <div class="col-md-6 col-sm-6">
            <input class="form-control" name="@Html.DisplayNameFor(model => model.Template)" placeholder="" />
        </div>
    </div>
    <div class="field item form-group">
        <label class="col-form-label col-md-3 col-sm-3  label-align">@Html.DisplayNameFor(model => model.Critical)</label>
        <div class="col-md-6 col-sm-6">
            <div class="">
                <label>
                    <input name="@Html.DisplayNameFor(model => model.Critical)" type="checkbox" class="js-switch" />
                </label>
            </div>
        </div>
    </div>
    <div class="field item form-group">
        <label class="col-form-label col-md-3 col-sm-3  label-align">@Html.DisplayNameFor(model => model.Enable)</label>
        <div class="col-md-6 col-sm-6">
            <div class="">
                <label>
                    <input name="@Html.DisplayNameFor(model => model.Enable)" type="checkbox" class="js-switch" />
                </label>
            </div>
        </div>
    </div>

    <div class="ln_solid">
        <div class="form-group">
            <div class="col-md-6 offset-md-3">
                <button type='submit' class="btn btn-primary">Submit</button>
                <button type='reset' class="btn btn-success">Reset</button>
            </div>
        </div>
    </div>

</form>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    <!-- Javascript functions	-->
    <script>
        // initialize a validator instance from the "FormValidator" constructor.
        // A "<form>" element is optionally passed as an argument, but is not a must
        var validator = new FormValidator({
            "events": ['blur', 'input', 'change']
        }, document.forms[0]);
        // on form "submit" event
        document.forms[0].onsubmit = function (e) {
            var submit = true,
                validatorResult = validator.checkAll(this);
            console.log(validatorResult);
            return !!validatorResult.valid;
        };
        // on form "reset" event
        document.forms[0].onreset = function (e) {
            validator.reset();
        };
        // stuff related ONLY for this demo page:
        $('.toggleValidationTooltips').change(function () {
            validator.settings.alerts = !this.checked;
            if (this.checked)
                $('form .alert').remove();
        }).prop('checked', false);

    </script>
}

